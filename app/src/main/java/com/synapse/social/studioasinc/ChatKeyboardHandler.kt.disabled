package com.synapse.social.studioasinc

import android.text.Editable
import android.text.TextWatcher
import android.view.View
import android.widget.EditText
import android.widget.LinearLayout
import com.google.android.material.button.MaterialButton
import com.synapse.social.studioasinc.backend.SupabaseAuthenticationService
import com.synapse.social.studioasinc.backend.SupabaseChatService
import com.synapse.social.studioasinc.util.SupabaseChatUtils
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class ChatKeyboardHandler(
    private val activity: ChatActivity,
    private val messageEt: EditText,
    private val toolContainer: View,
    private val btn_sendMessage: MaterialButton,
    private val messageInputOutlinedRound: LinearLayout,
    private val messageInputOverallContainer: LinearLayout
) {

    private val authService = SupabaseAuthenticationService()
    private val chatService = SupabaseChatService()

    fun setup() {
        messageEt.addTextChangedListener(object : TextWatcher {
            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {
                val charSeq = s.toString()
                val currentUserId = authService.getCurrentUserId() ?: return
                val otherUserId = activity.intent.getStringExtra("uid") ?: return
                val chatId = SupabaseChatUtils.getChatId(currentUserId, otherUserId)

                CoroutineScope(Dispatchers.IO).launch {
                    if (charSeq.isEmpty()) {
                        // Stop typing
                        chatService.updateTypingStatus(chatId, currentUserId, false)
                        
                        // Update UI on main thread
                        activity.runOnUiThread {
                            activity._TransitionManager(messageInputOverallContainer, 150.0)
                            toolContainer.visibility = View.VISIBLE
                            btn_sendMessage.visibility = View.GONE
                            messageInputOutlinedRound.orientation = LinearLayout.HORIZONTAL
                        }
                    } else {
                        // Start typing
                        chatService.updateTypingStatus(chatId, currentUserId, true)
                        
                        // Update UI on main thread
                        activity.runOnUiThread {
                            activity._TransitionManager(messageInputOverallContainer, 150.0)
                            toolContainer.visibility = View.GONE
                            btn_sendMessage.visibility = View.VISIBLE
                            messageInputOutlinedRound.orientation = LinearLayout.VERTICAL
                        }
                    }
                }
            }

            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {}

            override fun afterTextChanged(s: Editable) {
                if (messageEt.lineCount > 1) {
                    messageInputOutlinedRound.setBackgroundResource(R.drawable.bg_message_input_expanded)
                } else {
                    messageInputOutlinedRound.setBackgroundResource(R.drawable.bg_message_input)
                }
            }
        })
    }
}