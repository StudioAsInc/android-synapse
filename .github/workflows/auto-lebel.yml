name: AI Labeler

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  label-issue:
    runs-on: ubuntu-latest
    # This step runs for issues and pull requests from the main repository
    if: github.event_name == 'issues' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Google GenAI dependency
        run: npm install @google/genai

      - name: Analyze and Label with Gemini
        uses: actions/github-script@v7
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          script: |
            // The module is now available because we installed it
            const { GoogleGenAI } = require("@google/genai");
            const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

            // Get the title and body of the issue or PR
            let title, body, number;
            if (context.payload.issue) {
              title = context.payload.issue.title;
              body = context.payload.issue.body;
              number = context.payload.issue.number;
            } else {
              title = context.payload.pull_request.title;
              body = context.payload.pull_request.body;
              number = context.payload.pull_request.number;
            }
            const textToAnalyze = `Title: ${title}\n\nBody: ${body}`;

            // Craft a precise prompt for Gemini
            const prompt = `
            Analyze the following GitHub issue or pull request. Your task is to suggest the most relevant labels from the list below.

            <available_labels>
            bug, documentation, enhancement, question, priority-critical, priority-high, priority-medium, priority-low, help-wanted, good-first-issue
            </available_labels>

            <analysis_instructions>
            1. Classify the primary type using: bug, documentation, enhancement, question.
            2. If it's a bug or enhancement, assess its priority based on urgency and impact. Choose one: priority-critical, priority-high, priority-medium, priority-low. If not applicable, skip.
            3. If the author seems to be asking for help or the issue is simple, consider adding help-wanted or good-first-issue.
            4. Return ONLY a valid JSON array of the chosen label names, like ["label1", "label2"]. Do not add any other text or explanation.
            </analysis_instructions>

            <issue_or_pr_content>
            ${textToAnalyze}
            </issue_or_pr_content>

            Suggested labels JSON array:
            `;

            try {
              const response = await ai.models.generateContent({
                model: "gemini-2.5-pro",
                contents: prompt,
              });

              const labelString = response.text.trim();
              // Safely parse the JSON response from Gemini
              const labelsToAdd = JSON.parse(labelString);

              console.log(`Labels to add: ${labelsToAdd}`);

              // Apply the labels using the GitHub API
              if (labelsToAdd.length > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: number,
                  labels: labelsToAdd
                });
                console.log(`Successfully added labels to #${number}.`);
              }
            } catch (error) {
              console.error('Error occurred:', error);
              // This helps with debugging if the AI returns unexpected output
              if (error.response) {
                console.error('API Response error details:', error.response);
              }
            }