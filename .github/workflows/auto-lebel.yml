name: Auto Label with Gemini

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install node-fetch@3

      - name: Generate labels with Gemini
        id: gemini
        run: |
          cat > script.mjs <<'EOF'
          import fetch from "node-fetch";

          const event = process.env.GITHUB_EVENT_PATH ? require(process.env.GITHUB_EVENT_PATH) : {};
          const title = event.issue?.title || event.pull_request?.title || "";
          const body = event.issue?.body || event.pull_request?.body || "";

          const prompt = `Suggest 2-3 short GitHub labels (one word each) for this:\nTitle: ${title}\nBody: ${body}\nRespond with a comma-separated list.`;

          const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.GEMINI_API_KEY}", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              contents: [{ parts: [{ text: prompt }] }]
            })
          });

          const data = await response.json();
          const text = data.candidates?.[0]?.content?.parts?.[0]?.text || "";
          const labels = text.split(",").map(l => l.trim()).filter(Boolean);

          console.log("::set-output name=labels::" + JSON.stringify(labels));
          EOF

          node script.mjs

      - name: Apply labels
        if: steps.gemini.outputs.labels != ''
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse(process.env.LABELS || "[]");
            if (labels.length > 0) {
              if (context.eventName === "issues") {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: labels
                });
              } else if (context.eventName === "pull_request") {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: labels
                });
              }
            }
        env:
          LABELS: ${{ steps.gemini.outputs.labels }}